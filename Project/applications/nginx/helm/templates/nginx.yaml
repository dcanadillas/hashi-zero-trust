---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: {{ .Values.namespace }}
  labels:
    app: nginx
spec:
  selector:
    app: nginx
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx
  namespace: {{ .Values.namespace }}
  labels:
    app: nginx
automountServiceAccountToken: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
  namespace: {{ .Values.namespace }}
  labels:
    app: nginx
data:
  config: |
    # /etc/nginx/conf.d/default.conf
      proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;
      upstream frontend_upstream {
        server frontend:3000;
      }
      server {
        listen 80;
        server_name  localhost;
        server_tokens off;
        gzip on;
        gzip_proxied any;
        gzip_comp_level 4;
        gzip_types text/css application/javascript image/svg+xml;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        location /_next/static {
          proxy_cache STATIC;
          proxy_pass http://frontend_upstream;
          # For testing cache - remove before deploying to production
          # add_header X-Cache-Status $upstream_cache_status;
        }
        location /static {
          proxy_cache STATIC;
          proxy_ignore_headers Cache-Control;
          proxy_cache_valid 60m;
          proxy_pass http://frontend_upstream;
          # For testing cache - remove before deploying to production
          # add_header X-Cache-Status $upstream_cache_status;
        }
        location / {
          proxy_pass http://frontend_upstream;
        }
        location /api {
          proxy_pass http://public-api:8080;
        }
      }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: {{ .Values.namespace }}
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
      annotations:
        consul.hashicorp.com/connect-inject: "true"
    spec:
      serviceAccountName: nginx
      volumes:
        - name: config
          configMap:
            name: nginx-configmap
            items:
              - key: config
                path: default.conf
      containers:
        - name: nginx
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 80
          {{- with .Values.env }}
          env:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d
              readOnly: true